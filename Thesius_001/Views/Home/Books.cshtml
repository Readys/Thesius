@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "Книги";
}

@{
    var userIdStr = User.Identity.GetUserId();
    //userIdStr = userIdStr.Replace("-", "");

    var tree = ViewBag.Tree;

}


<div v-if="!Loading" id="loader" style="display:none;">
    <loader object="#ff9633" color1="#ffffff" color2="#17fd3d" size="5" speed="2" bg="#343a40" objectbg="#999793" opacity="20" name="circular"></loader>
</div>
<div id="p_prldr"><div class="contpre"><span class="svg_anm"></span><br>Подождите<br><small>идет загрузка</small></div></div>


<div class="col-lg-12" id="Table">
    <div class="m-demo" data-code-preview="true" data-code-html="true" data-code-js="false">
        <div class="m-demo__preview">
            <div class="row">
                <div class="col-lg-6">
                    <!--begin:1:Portlet-->
                    <div class="m-portlet m-portlet--tabs">
                        <div class="m-portlet__head">
                            <div class="m-portlet__head-label">
                                <h3 style="padding-top:21px;" class="m-portlet__head-title">
                                    Все книги
                                </h3>

                            </div>
                        </div>
                        <div class="m-portlet__body">
                            <div id="demo">
                                <button @@click="changeId()">ku</button>
                                <tree-node class="node" :node="treeData.children[0]" v-on:make-folder="makeFolder" v-on:add-node="addItem"
                                           v-on:edit-node="editItem" v-on:save-node="saveItem" v-on:del-node="delItem" :label="treeData.children[0].Title"
                                           :editable="editable" :editable2="editable2">
                                </tree-node>
                            </div>
                        </div>
                    </div>
                    <!--end::Portlet-->
                </div>
            </div>
        </div>
    </div>
</div>

<div id="DelTree" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Удаление раздела</h4>
            </div>
            <div class="modal-body">
                <div class="swal2-icon swal2-warning swal2-animate-warning-icon" style="display: flex;"><span class="swal2-icon-text">!</span></div>
                <h2 align="center" class="swal2-title" id="swal2-title">Вы действительно намерены удалить раздел?</h2>
            </div>
            <div class="modal-footer">
                <button type="button" OnClick="demo.deldel(delItem)" class="btn btn-danger">Удалить раздел</button>
                <button OnClick="mApp.unblockPage('.page-content');" type="button" class="btn btn-default Unblok" data-dismiss="modal">Отмена</button>
            </div>
        </div>
    </div>
</div>


<div id="pub" class="container">
    @*<div v-for="(pub, index) in Publications" class="row" style="margin-top:15px;">
        <div class="col-md-1"></div>
        <div class="col-md-7" style="background-color:white">
            <div class="row">
                <div class="col-md-1"><span class="small">{{pub.UserName}}</span></div>
                <div class="col-md-3">
                    <span class="small">
                        <small>{{ConvertTime(pub.CreateDate)}}</small>
                    </span>
                </div>
                <div class="col-md-7"></div>
                <div class="col-md-1 ">
                    <a v-if="pub.UserId == userId" :href="'/Home/AddEditBook/' + pub.BookId"><i style="color:gray" class="fas fa-edit pull-right"></i></a>
                    <i v-if="pub.UserId == 'c109f3f4-8549-42a2-b025-284a27480828'" @@click="TrashArticle(pub.ArticleId, index)" style="color:gray; cursor:pointer;" class="fas fa-trash"></i>
                </div>
            </div>
            <div class="row" style="margin-top:5px;">
                <div class="col-md-1"></div>
                <div class="col-md-10"><h5 class="text-muted">{{pub.Title}}</h5></div>
                <div class="col-md-1"></div>
            </div>
            <div class="row" style="margin-top:5px;">
                <div class="col-md-1"></div>
                <div class="col-md-10">
                    <div v-if="pub.ShortView == 0">
                        <p class="text-muted pp">{{pub.ViewArticleBlock[0].Text_}}</p>
                        <a @@click="ShowAllArticle(pub.ArticleId, index)" href="#" style="text-decoration:none"><small>ПОКАЗАТЬ ПОЛНОСТЬЮ</small></a>
                    </div>
                    <div v-else>
                        <p class="pp" v-for="(block, index) in pub.ViewArticleBlock">
                            <span v-if="block.Type == 2" style="color:#877D7D; font-size:small" title="Ваша оценка">{{block.ViewThesis.MyMark}} </span>
                            <span @@click="PlusThesis(index,block.ViewThesis.Thesis.ThesisId)" v-if="block.Type == 2 && block.ViewThesis.MyMark != 1" style="cursor:pointer; color:#877D7D" title="Оценить положительно"><b>+</b></span>
                            <span v-if="block.Type == 2 && block.ViewThesis.MyMark == 1" style="cursor:pointer; color:#157347" title="Вы оценили тезис положительно"><b>+</b></span>
                            <span @@click="MinusThesis(index,block.ViewThesis.Thesis.ThesisId)" v-if="block.Type == 2 && block.ViewThesis.MyMark != -1" style="cursor:pointer; color:#877D7D" title="Оценить отрицательно"><b>-</b></span>
                            <span v-if="block.Type == 2 && block.ViewThesis.MyMark == -1" style="cursor:pointer; color:#DC3545" title="Вы оценили тезис отрицательно"><b>-</b></span>
                            {{block.Text_}}
                            <span v-if="block.Type == 2" style="cursor:pointer;" @@click="block.ViewThesis.ShowOther = !block.ViewThesis.ShowOther">→</span>
                            <span v-if="block.Type == 2 && block.ViewThesis.ShowOther" class="badge rounded-pill bg-success">{{block.ViewThesis.CountPlus}} </span>
                            <span v-if="block.Type == 2 && block.ViewThesis.ShowOther" class="badge rounded-pill bg-secondary">{{block.ViewThesis.CountDnotNow}} </span>
                            <span v-if="block.Type == 2 && block.ViewThesis.ShowOther" class="badge rounded-pill bg-danger">{{block.ViewThesis.CountMinus}} </span>
                            <span v-if="block.Type == 2 && block.ViewThesis.ShowOther" title="Процент за" class="badge bg-success">{{block.ViewThesis.Procent}}</span>
                            <a v-if="block.Type == 2 && block.ViewThesis.ShowOther" :href="'/home/InfoThesis/' + block.ViewThesis.Thesis.ThesisId" class="badge rounded-pill bg-info"><i style="color:white;" class="fas fa-eye"></i></a>
                        </p>
                    </div>
                </div>
                <div class="col-md-1"></div>
            </div>
        </div>
        <div class="col-md-4">

        </div>
    </div>*@

</div>


<style>

    body {
        background-color: #f4f4f4;
        font-family: "Open Sans", sans-serif;
        font-size: 18px;
        font-weight: 300;
        line-height: 1em;
    }

    /*.container {
        width: 600px;
        margin: 0 auto;
    }*/

    .tree-menu .label-wrapper {
        padding-bottom: 10px;
        margin-bottom: 10px;
        border-bottom: 1px solid #ccc;
    }

        .tree-menu .label-wrapper .has-children {
            cursor: pointer;
        }

    .node {
        cursor: pointer;
    }

    .bold {
        font-weight: bold;
    }

    ul {
        padding-left: 1em;
        line-height: 1.5em;
        list-style-type: dot;
    }
</style>


<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js" integrity="sha512-bZS47S7sPOxkjU/4Bt0zrhEtWx0y0CRkhEp8IckzK+ltifIIE9EMIMTuT/mEzoIMewUINruDBIR/jJnbguonqQ==" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>

<script type="text/x-template" id="node-template">
    <div class="label-wrapper">
        <div :style="indent" :class="labelClasses">
            <div class="label-wrapper">
                <span v-if="node.ParentId" class="has-children" v-on:click="toggle"><i v-if="isFolder" v-on:click="toggleChildren" class="fa" :class="iconClasses"></i></span>
                <!--<span v-if="isFolder && editable == 1" style="list-style:none;" class="add" v-on:click="$emit('add-node', node)" title="Добавить дочерний раздел"><i class="fa fa-plus"></i></span>-->
                <span v-if="label == '/'" style="" :class="{bold: isFolder}">{{label}} r</span>
                <a v-if="node.ParentId == 1" :href="'/Home/AddEdit/' + node.BookId"><span style="cursor:pointer" :class="{bold: isFolder}">{{label}} b</span></a>
                <a v-if="node.ParentId > 1" :href="'/Home/AddEdit/' + node.BookId"><span style="cursor:pointer" :class="{bold: isFolder}">{{label}} a</span></a>
                <span v-if="editable == 1 && label != '/' && node.UserId == editable2" class="has-children"><i v-on:click="toggleEdit" class="fa fa-edit"></i></span>
                <span v-if="editable == 1 && label != '/'  && node.UserId == editable2" class="has-children" title="Удалить раздел"><i v-on:click="trash" class="fa fa-trash"></i></span>
                <span v-if="!isFolder && editable == 1 && node.ParentId == 1 && node.UserId == editable2" class="add" v-on:click="makeFolder"><i class="fa fa-plus-square" title="Добавить главу"></i></span>
            </div>
            <div v-if="edit">
                <input id="editLabel" v-bind:value="label" v-on:change="editName" v-on:input="$emit('edit-node', $event.target.value)" type="text" name="editLabel">
            </div>
            <ul v-show="isOpen" v-if="isFolder">
                <tree-node class="node" v-for="(child, index) in node.children" :key="index" :node="child" :label="child.Title"
                           :editable="editable" :editable2="editable2" v-on:make-folder="$emit('make-folder', $event)"
                           v-on:add-node="$emit('add-node', $event)" v-on:edit-node="$emit('edit-node', $event)" v-on:save-node="$emit('save-node', $event)"
                           v-on:del-node="$emit('del-node', $event, index)" v-on:select-edit="$emit('select-edit', $event)">
                </tree-node>
                <li v-if="editable == 1 && label == '/'" title="Добавить книгу" style="list-style:none;" class="add" v-on:click="$emit('add-node', node)"><i class="fa fa-plus"></i></li>
                <li v-if="editable == 1 && label != '/' && node.UserId == editable2" title="Добавить главу" style="list-style:none;" class="add" v-on:click="$emit('add-node', node)"><i class="fa fa-plus"></i></li>
            </ul>
        </div>
    </div>
</script>

<script type="text/javascript">

        treeData2 = new Object()
        treeData2.children =  @Html.Raw(Json.Encode(tree));

        var bufer = "";
        var delItem = 0;

        // define the tree-node component
        Vue.component('tree-node', {
            template: '#node-template',
            props: ['node', 'label', 'editable', 'editable2', ],
            data: function () {
                return {
                    isOpen: true,
                    showChildren: true,
                    edit: false,
                    name: "",
                }
            },
            computed: {
                isFolder: function () {
                    return this.node.children &&
                        this.node.children.length
                },
                iconClasses() {
                    return {
                        'fa-folder': !this.showChildren,
                        'fa-folder-open': this.showChildren
                    };
                },
                labelClasses() {
                    return { 'has-children': this.children };
                },
                indent() {
                    return { transform: `translate(${this.depth * 20}px)` };
                },
            },
            methods: {
                toggle: function () {
                    if (this.isFolder) {
                        this.isOpen = !this.isOpen
                    }
                },
                makeFolder: function () {
                    if (!this.isFolder) {
                        this.$emit('make-folder', this.node);
                        this.isOpen = true;
                        this.showChildren = true;
                    }
                },
                editName: function () {
                    this.$emit('save-node', this.node);
                    this.edit = false;
                    //alert("save");
                },
                trash: function () {
                    this.$emit('del-node', this.node);
                    //alert(this.key);
                },
                toggleChildren() {
                    this.showChildren = !this.showChildren;
                },
                toggleEdit() {
                    this.edit = !this.edit;
                    if (!this.edit) {
                        //alert("save")
                    }
                },
                exportItem: function (item) {
                    learnTree.lTree.children.push(this.node);
                },
            }
        })

        var demo = new Vue({
            el: '#demo',
            data: {
                treeData: treeData2,
                editable: 1,
                editable2: @Html.Raw(Json.Encode(userIdStr)),
            },
            methods: {
                changeId: function () {
                    this.editable2 = "";
                },
                makeFolder: function (node) {
                    Vue.set(node, 'children', []);
                    node.ParentId = node.BookId;
                    this.addItem(node);
                },
                addItem: function (node) {
                    //mApp.blockPage('.page-content');
                    var parentId = node.BookId;
                    var operation = "";
                    var name = "";

                    if (parentId == 1) {
                        operation = 'addCategory/';
                        name = 'Новая книга';
                    } else {
                        operation = 'addArticle/';
                        name = 'Новая статья';
                    }

                    axios.post('/Home/' + operation, {
                        id: parentId, name: name, 
                        }, {
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        }).then(response => {
                            //mApp.unblockPage('.page-content');
                            node.children.push(
                                {
                                    "BookId": response.data, "Title": name, "UserId": null, "UserName": null,
                                    "CreateDate": "", "ModifedDate": "", "children": [], "ViewArticles": null
                                });
                            //alert(response.data);
                        }).catch(error => {
                            //mApp.unblockPage('.page-content');
                            alert('Error');
                    });

                },
                editItem: function (label) {
                    bufer = label;
                    //alert(bufer);
                },
                delItem: function (node, i) {
                    //var parent = _.find(this.treeData.children[0], { 'TreeId': 2, });
                    //parent = _.filter(this.treeData.children[0], function (o) { return !o.Item.TreeId = 2; });
                    //parent = null;
                    //var alertDel = confirm("Вы удаляете раздел, продолжить?");
                    delItem = node.BookId;
                    $('#DelTree').modal('show');
                    //mApp.blockPage('.page-content');
                    //alert(i);

                },
                deldel: function (id) {
                    alert(id);
                    $.ajax({
                        type: "POST",
                        url: "/AJAX/DeleteCategory/",
                        data: { id: id},
                        success: function (data) {
                            if (data == "OK") {
                                //mApp.unblockPage('.page-content');
                                window.location = '/Tree/Index/'
                                //parent.children.splice(i, 1);
                            } else {
                                alert('Error data');
                            }
                        },
                        error: function () {
                            alert('Error');
                            //mApp.unblockPage('.page-content');
                        }
                    });
                },
                saveItem: function (node) {
                    //mApp.blockPage('.page-content');
                    var parentId = node.BookId;
                    var type = 0;
                    if (parentId == 1) {
                        type = 1;
                    } else {
                        type = 2;
                    }
                    node.Title = bufer;
                    axios.post('/JSON/SaveTree/', {
                        id: node.BookId, title: bufer, type: type
                        }, {
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        }).then(response => {
                            //mApp.unblockPage('.page-content');
                            alert(response.data);
                        }).catch(error => {
                            //mApp.unblockPage('.page-content');
                            alert('Error');
                    });
                },
            }
        })

</script>

<script type="text/javascript">
    $(window).on('load', function () {
        var $preloader = $('#p_prldr'),
            $svg_anm = $preloader.find('.svg_anm');
        $svg_anm.fadeOut();
        $preloader.delay(500).fadeOut('slow');
    });



</script>
@*<script>
    var pub = new Vue({
        el: '#pub',
        data: {
            userId:  @Html.Raw(Json.Encode(userIdStr)),
            Publications:[],
        },
        computed: {
        },
        methods: {
            ThesisUpdateCount(index, id) {
                axios.post('/JSON/ThesisUpdateCount/', {
                    id: id,
                }, {
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    }).then(response => {// Возвращать ThesisId
                        this.Publications[0].ViewArticleBlock[index].ViewThesis.CountPlus = response.data.viewThesis.CountPlus;
                        this.Publications[0].ViewArticleBlock[index].ViewThesis.Procent = response.data.viewThesis.Procent;
                        //Разблокировка
                        $("#loader").hide();
                    }).catch(error => {
                        $("#loader").hide();
                        alert('Error');
                        //Разблокировка
                    });
            },
            MinusThesis: function (index, id) {
                $("#loader").show();
                axios.post('/JSON/MinusThesis2/', {
                    thesisId: id,
                }, {
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    }).then(response => {// Возвращать ThesisId
                        this.Publications[0].ViewArticleBlock[index].ViewThesis.MyMark = response.data;
                        this.ThesisUpdateCount(index,id);
                        //Разблокировка
                        $("#loader").hide();
                    }).catch(error => {
                        $("#loader").hide();
                        alert('Error');
                        //Разблокировка
                    });
            },
            PlusThesis: function (index, id) {
                $("#loader").show();
                axios.post('/JSON/PlusThesis2/', {
                    thesisId: id,
                }, {
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    }).then(response => {// Возвращать ThesisId
                        this.Publications[0].ViewArticleBlock[index].ViewThesis.MyMark = response.data;
                        this.ThesisUpdateCount(index, id);

                        //Разблокировка
                        $("#loader").hide();
                    }).catch(error => {
                        $("#loader").hide();
                        alert('Error');
                        //Разблокировка
                    });
            },
            ShowAllArticle(id, index) {
                this.Publications[index].ShortView = 1
                //axios.post('/JSON/ShowAllArticle/', {
                //    id: id,
                //}, {
                //        headers: {
                //            'Content-Type': 'application/json',
                //        }
                //    }).then(response => {
                //        this.Publications[index].blocks = response.data.viewArticleBlock;
                //        //Разблокировка
                //        $("#loader").hide();
                //    }).catch(error => {
                //        $("#loader").hide();
                //        alert('Error');
                //        //Разблокировка
                //    });
            },
            TrashArticle(id, index) {
                if (confirm("Удалить публикацию?")) {
                    axios.post('/JSON/DelArticle/', {
                        id: id,
                    }, {
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        }).then(response => {
                            if (response.data == "Ok") {
                                this.Publications.splice(index, 1);
                            }
                            //Разблокировка
                            $("#loader").hide();
                        }).catch(error => {
                            $("#loader").hide();
                            alert('Error');
                            //Разблокировка
                        });
                }

            },

            ConvertTime(data) {
                var dt = new Date(parseInt(data.substr(6, data.length - 8), 10)).toLocaleString();
                return dt;
            },

        },
        mounted: function () {
            $("#appT").show();
            setTimeout(() => { $("#loader").hide(); }, 2000);

            axios
                .get('/JSON/Books/')
                .then(response => (this.Publications = response.data.viewBooks));


        },
    });

</script>*@